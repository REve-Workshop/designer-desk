#+TITLE: Idea - LISP Database Format

* Existing tools as possible candidate
  :PROPERTIES:
  :ID:       9aaa54c3-35c5-4050-9df3-c27f46e419a8
  :END:
  - https://github.com/inaimathi/fact-base
  - https://common-lisp.net/project/cl-prevalence/
  - https://github.com/arieltan/rucksack
  - https://github.com/fukamachi/datafly
  - Use a common lisp class as table definition and instances of class as record.
* Characteristics
  :PROPERTIES:
  :ID:       b0b5f976-77a2-4674-9236-7ab9140b628e
  :END:
  - Records
    - Transaction based
      - Transactions for a table in multiple files
      - Each S-EXP will contain the transaction operation and the
        changed data
        - insert
        - delete
        - update
    - Data based
      - Each S-EXP will contain the data of a row
      - No transaction
      - Records for a table in multiple files
  - LISP-like format for tables definition and records
  - Text file
    - Text Editor friendly
    - Must be portable across programming languages
  - Tables
    - Modification to the table structure require a new version
      - Version property as part of the table definition
      - Can be omitted for table that never changes
  - File format 1
    - Table definition and records in same file
    - One table per file
    - Table definition in each file
  - File format 2
    - Table definition in a separate file
    - Reference to table definition in each transaction file
  - Tools
    - Basic search and filtering capability
    - Allow to add one transaction per call
    - Build a snapshot of the table state for a range of transactions
      - A set of files
      - A previous snapshot + transaction files
      - A date range
      - A previous snapshot + an end date
      - Output: LISP-like, csv
* Table definition
  :PROPERTIES:
  :ID:       d37699fb-b8ec-4e50-bf5e-db16bfaf11c6
  :END:
  #+begin_example
  (TABLE name description (VERSION nil)
   ((FIELD name type description (key nil) (nil-allowed t) (unique nil) (type-specific-options-list nil)))
   ((INDEX name field-name (order-by ascending))))
  #+end_example

  *Q*: should index be part of the definition?

  Possible values for =KEY=:
  - =nil=
  - =primary=

  Possible values for =TYPE=:
  - =integer=
  - =decimal=
  - =string=
  - =char=
  - =byte-array=

  Options list for type =integer=:
  - =min-value=
  - =max-value=
  - =sequence=
  - =size=

  Options list for type =decimal=:
  - =min-value=
  - =max-value=
  - =precision=: format =<number>.<number>=

  Options list for type =string=:
  - =size=
  - =allowed-values=: a list

  Options list for type =char=:
  - =size=
  - =allowed-values=: a list

  Options list for type =byte-array=:
  - =size=
  - =allowed-values=: a list

* Transaction record format
  :PROPERTIES:
  :ID:       a18e474a-9c96-451c-a271-8fa104534087
  :END:
  - INSERT
    #+begin_example
    (+ record-date field1-value field2-value field3-value...)
    #+end_example
  - DELETE
    #+begin_example
    (- record-date primary-key-field-value)
    #+end_example
  - UPDATE
    #+begin_example
    (| record-date primary-key-field-value :field1 new-value :field2 new-value :field5 new-value...)
    #+end_example
* Table record format
  :PROPERTIES:
  :ID:       d6cdfcfb-f04d-4ad4-b445-e4bd10ae88a1
  :END:
  #+begin_example
    (primary-key-field-value field2-value field3-value field4-value...)
  #+end_example
* Table relationship format
  :PROPERTIES:
  :ID:       b2e5adad-9fd4-4a89-80c3-b99f6a2669fd
  :END:
  *Q*: Is it event necessary?
* Database structure
  :PROPERTIES:
  :ID:       08f53fa4-8691-4ec6-ab13-04bc731f8f38
  :END:
  The database will be a directory structure as following:
  #+begin_example
    database-name/
       etc/
       data/
  #+end_example
  - =etc/=, the configuration of the database
  - =data/=, the data files of the database
